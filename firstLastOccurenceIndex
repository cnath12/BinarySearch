class Solution {

    private int binarySearchRight(int[] nums, int target) {
        int low = 0, high = nums.length -1;
        while(low<=high) {
            int mid = low+(high-low)/2;
            if(nums[mid] == target) {
                if(mid == nums.length -1 || nums[mid]<nums[mid+1]) {
                    return mid;
                }
                else{
                    low = mid+1;
                }
            }
            else if(nums[mid] > target) {
                high = mid - 1;
            }
            else{
                low = mid+1;
            }
        }
        return -1;
    }
    private int binarySearchLeft(int[] nums, int target) {
        int low = 0, high = nums.length -1;
        while(low<=high) {
            int mid = low+(high-low)/2;
            if(nums[mid] == target) {
                if(mid == 0 ||nums[mid-1]<nums[mid]) {
                    return mid;
                }
                else{
                    high = mid-1;
                }
            }
            else if(nums[mid] > target) {
                high = mid - 1;
            }
            else{
                low = mid+1;
            }
        }
        return -1;
    }

    public int[] searchRange(int[] nums, int target) {
        if (nums == null || nums.length == 0) return new int [] {-1,-1};
        int left = binarySearchLeft(nums, target); //leftmost index of target
        int right = binarySearchRight(nums, target); //rightmost index of target
        return new int[] {left,right};
    }
}
